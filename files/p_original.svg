<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN"
"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg onload="if(typeof(top)!='undefined'){top.setTimeout(init,5)}else{init()} " 
xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" >
    <g id="firstGroup">
    </g>
    <script type="text/ecmascript"><![CDATA[

function Mot (txt,x,y){

    this.text  = function () {return this.txt}
    this.setBackground = function(color){
	this.rectElement.setAttributeNS(null,"fill",color);
    }
    
    this.width = function(){
       return (this.textWidth+0.7 )* Mot.fontSize 
    }
    
    this.height = function(){
       return  this.textHeight * Mot.fontSize*1.9
    }

    this.corners = function() {
      var width = this.width()
      var height = this.height()
       var x0 = this.x - width/2
       var x1 = this.x + width/2
       var y0 = this.y - height/2
       var y1 = this.y + height/2
       return [[x0,y0],[x1,y0],[x1,y1],[x0,y1]]
    }
    
   this.isVisible = function(){
      return this.textElement.getAttributeNS(null,"visibility") == "visible"
   }
   
   this.show = function(show){
      this.textElement.setAttributeNS(null,"visibility",  show ? 'visible' : 'hidden' )
      this.rectElement.setAttributeNS(null,"visibility",  show ? 'visible' : 'hidden' )
      if(show){ this.adjustToFontSize() }
   }
   
   this.adjustToFontSize = function(){
      this.textElement.setAttributeNS(null,"font-size",Mot.fontSize+"px");
      this.textElement.setAttributeNS(null,"x",this.x);
      this.textElement.setAttributeNS(null,"y",this.y +this.textHeight*Mot.fontSize/2);
     
      var corners = this.corners()
      svghelper.shapeSimpleRect(this.rectElement,
			      corners[0][0],
			      corners[0][1],
			      corners[2][0]-corners[0][0],
			      corners[2][1]-corners[0][1])
   }
		
   this.addChild = function (child){
	       this.children.push(child)
	       child.depth = this.depth + 1
	       child.parent = this
    }
    
    this.x=x*globals.totalWidth;
    this.y=y*globals.totalHeight;
    this.txt=txt    
    this.depth = 0
    this.children = []
    
    this.textElement = svghelper.createText(txt,Mot.getFontSize(),this.x,this.y)
    this.rectElement = svghelper.createSimpleRect(this.textElement) 
    this.textElement.addEventListener("mousedown",Mot.mousedown, false)
    this.textElement.addEventListener("mousemove",Mot.mousemove, false)
    this.textElement.addEventListener("mouseup",Mot.mouseup, false)
    this.textElement.addEventListener("mouseout",Mot.mouseout, false)
    this.textElement.mot = this
    this.textWidth = svghelper.calculateWidth(txt)
    this.textHeight = globals.letterHeight

    this.adjustToFontSize()	    
}
Mot.fontSize = 50
Mot.getFontSize = function (){return Mot.fontSize}
Mot.setFontSize = function (size){Mot.fontSize = parseFloat(size)}
Mot.toString = function(mot,varname){
      if(!varname){
       varname = mot.text().toLowerCase()
      }
      var s = 'var ' + varname
      s += ' = new Mot("'+mot.text()+'",'
      s += mot.x/globals.totalWidth+','
      s += mot.y/globals.totalHeight+')\n'      
      return s
    }
    
Mot.recursiveToString = function(mot,existing,parentname){
      var indent = ""
      for(var j = 0; j < mot.depth; j++){
	   indent += " "
      }
      var varname = mot.text().toLowerCase()
      while(Mot.nameIsInArray(varname,existing)){
        varname += "I"
      }
      existing.push(varname)
      var s = indent + Mot.toString(mot,varname)
      if(parentname){
        s+= indent + parentname +".addChild("+varname+")\n"
      }
      for(var i in mot.children){
        var child = mot.children[i]
        s += Mot.recursiveToString(child,existing,varname)
      }
      return s
    }
Mot.nameIsInArray = function(varname,anarray){
  for(var i in anarray){
           if( varname == anarray[i]){ return true }
  }
  return false 
}

Mot.prototype.fits = function(){
   var corners = this.corners()
   var fits = true
   for(var i in corners){
     fits = fits && corners[i][0] > 5 && corners[i][0] < globals.totalWidth-5
     fits = fits && corners[i][1] > 5 && corners[i][1] < globals.totalHeight-5
   }
   return fits
}
Mot.prototype.containsPoint = function (point){
   var corners = this.corners()
   return point[0]>corners[0][0] && point[0]<=corners[2][0] && point[1]>corners[0][1] && point[1]<=corners[2][1]
 }
Mot.prototype.intersects = function(other){
   var oc = other.corners()
   for(var i in oc){ if(this.containsPoint(oc[i])) return true  }
   return false
}
Mot.prototype.equals = function (other){
   return this.text() == other.text() && this.x == other.x && this.y == other.y
}
Mot.prototype.childrenFit = function(){
   if(this.children.length == 0){ return false }
   for(var i in this.children){
      this.children[i].adjustToFontSize()
      if(! this.children[i].fits()){ return false }
   }
   for(var i = 0;i<this.children.length;i++){
     for(var j =i+1 ; j<this.children.length;j++){
         if(this.children[i].intersects(this.children[j])){ return false }
     }
   }
   return true
}
Mot.prototype.childrenIntersect = function(other){
   for(var i in this.children){
      if(this.children[i].intersects(other)){return true}
   }
   return false
}
Mot.prototype.showChildren = function(show){
     for(var i in this.children){
      this.children[i].show(show)
    }
 }

Mot.mousemove =           function(evt){
            //var r = globals.target 
	    var r = evt.target
	    if(r.doMove){
	       var dx1 =  parseInt(evt.screenX,10) 
	       var dy1 =  parseInt(evt.screenY,10) 
	       r.mot.x = dx1 + r.mx0
	       r.mot.y = dy1 + r.my0
	       r.mot.adjustToFontSize()

             }
	  }
Mot.mousedown = function(evt){
            //globals.target = evt.target
            var r = evt.target
	    if(!r.doMove){
	     r.doMove = true
	     r.tx0 = parseInt(r.mot.textElement.getAttributeNS(null,"x"),10)-parseInt(evt.screenX,10)
	     r.ty0 = parseInt(r.mot.textElement.getAttributeNS(null,"y"),10)-parseInt(evt.screenY,10)
	     r.rx0 = parseInt(r.mot.rectElement.getAttributeNS(null,"x"),10)-parseInt(evt.screenX,10)
	     r.ry0 = parseInt(r.mot.rectElement.getAttributeNS(null,"y"),10)-parseInt(evt.screenY,10)
	     r.mx0 = r.mot.x-parseInt(evt.screenX,10)
	     r.my0 = r.mot.y-parseInt(evt.screenY,10)
	    //}else{
	     //r.doMove = false
            }
	  }
Mot.mouseup =function(evt){evt.target.doMove=false}          
Mot.mouseout =function(evt){evt.target.doMove=false}

	  
//l'objet qui décide quels mots sont visibles
function Montreur(premierMot){
        this.visible = [premierMot]
	this.visible[0].show(true)
	
	this.adjustAllToFontSize = function(){
	 var to_add = []
	 var hasChanged = false
	 for(var i in this.visible){
	    var mot = this.visible[i]
	    if(!mot.isVisible()){
	      this.visible.splice(i,1)
	      continue
	    }
	    mot.adjustToFontSize()
	    if(!mot.fits()||this.motIntersectsVisibleAnd(mot,this.higher)){ 
	      //le mot mord sur le bord ou un autre mot visible
	      //remplacer le mot et ses frères par leur parent
	      if(mot.parent){
		      mot.parent.showChildren(false)
		      this.visible.splice(i,1)
		      mot.parent.adjustToFontSize()
		      mot.parent.show(true)
		      to_add.push(mot.parent)
		      var hasChanged = true
	      }
	    }else if(mot.childrenFit()&&!this.motArrayIntersectsVisible(mot.children)) {
	      //les enfants du mot ont la place d'être affichés sans se marcher dessus
	      //remplacer le mot par ses enfants
	      mot.show(false)
	      this.visible.splice(i,1)
	      mot.showChildren(true)
	      to_add = to_add.concat(mot.children)
	      var hasChanged = true
	    }    
	 }
	 this.visible = this.visible.concat(to_add)
	 return hasChanged
	}
	
	this.motArrayIntersectsVisible = function(mots,andfunction){
	  for(var i in mots){
	     if(this.motIntersectsVisibleAnd(mots[i],andfunction)){return true}
	  }
	  return false
	}
	
	this.motIntersectsVisibleAnd = function (mot,andfunction){
	 if(!andfunction){andfunction = this.truth}
	 var intersects = false
	  for(var i in this.visible){
	     if(mot.equals(this.visible[i])){continue}
	     if(mot.parent && this.visible[i].equals(mot.parent)){continue}
	     if(this.visible[i].parent && this.visible[i].parent.equals(mot)){continue}
	     if(mot.intersects(this.visible[i]) && andfunction(mot,this.visible[i])){
		intersects= true
		break
	     }
	  }
	  return intersects
	}
	
	this.truth = function (){return true}
	
	this.higher = function (mot, other){return mot.depth>=other.depth}
}

function Agrandisseur (maxSize){
	this.maxSize = maxSize
	this.minSize = 20
	this.delta = 3
	
	//pour animer()
        this.agrandis = function(indelta) {
	 var size = Mot.getFontSize()+indelta
	 if(size>0){
	     Mot.setFontSize(size)
	     globals.montreur.adjustAllToFontSize()
	     svghelper.debug(Mot.getFontSize())
	   }
	}
	this.animer = function() {
	 var oldsize = Mot.getFontSize()
	 if(oldsize>this.maxSize){this.delta = - Math.abs(this.delta)}
	 if(oldsize<this.minSize ){this.delta = Math.abs(this.delta)}
	 this.agrandis(this.delta)
	}
}


//ajax...
var distanceHistory = []
var xmlHttp
	
if(document.all){ xmlHttp = new ActiveXobject("Microsoft.XMLHTTP") 
}else if(typeof XMLHttpRequest == 'function'){
  xmlHttp = new XMLHttpRequest()
  try{ netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead")
  }catch(e){}
}else{
  //enlever ça!
  xmlHttp  =new Object()
}

xmlHttp.onreadystatechange = function(){
  if(xmlHttp.readyState == 4){
    var doc = xmlHttp.responseXML
    var distances = doc.getElementsByTagName("distance")
    var distance = distances[0].firstChild.data
    if(distance>0){distanceHistory.push(distance)}
    if(distanceHistory.length>7){distanceHistory.shift()}
    svghelper.debug(distanceHistory)
    //TODO moyenne sur un plus grand nombre quand le delta est plus grand
    var size = min(distanceHistory)*globals.maxSize/globals.maxDistance
    Mot.setFontSize(size)
    globals.montreur.adjustAllToFontSize()
  }
}

function readSensor(){
    xmlHttp.open("GET","http://localhost:8080/paysage/distance")
    xmlHttp.send(null)
}

function average (an_array){
  var sum = 0
  for(var i in an_array){ sum += parseInt(an_array[i]) }
  return sum/an_array.length
}

function min (an_array){
  var min 
  for(var i in an_array){ 
   var val = parseInt(an_array[i]);
   if(!min|| min>val) { min = val}
  }
  return min
}


function makeSvgHelper (){
	var svghelper = new Object()
	svghelper.debug = function (message){
	  document.getElementById("debug").firstChild.nodeValue = message
	}
	svghelper.calculateWidth = function (text){
	  var t = svghelper.createText(text,400,700,50+20)
	  t.setAttributeNS(null,"visibility", 'visible' )
	  var bbox = t.getBBox()
	  var width = bbox.width/400
	  svghelper.removeElement(t)
	  return width
	}
	svghelper.calculateHeight = function(text){
	  var t = svghelper.createText(text,400,700,50)
	  t.setAttributeNS(null,"visibility", 'visible' )
	  var bbox = t.getBBox()
	  var height = bbox.height/400
	  svghelper.removeElement(t)
	  return height
	}
	svghelper.createText = function(content,fontsize,x,y){
		   var  svgNS = "http://www.w3.org/2000/svg";
		   var textElement = document.createElementNS(svgNS,"text");
		    textElement.setAttributeNS(null,"x",x);        
		    textElement.setAttributeNS(null,"y",y);
		    textElement.setAttributeNS(null,"text-anchor","middle");
		    textElement.setAttributeNS(null,"fill","black");
		    textElement.setAttributeNS(null,"visibility", 'hidden' )
		    textElement.setAttributeNS(null,"font-size",fontsize+"px");
		    textElement.setAttributeNS(null,"font-weight","bold");
		    textElement.setAttributeNS(null,"font-family","Verdana")
		   // textElement.setAttributeNS(null,"font-family","Helvetica")
		    var textNode = document.createTextNode(content);
		    textElement.appendChild(textNode);    
		    document.getElementById("firstGroup").appendChild(textElement);
		    return textElement
	}
	svghelper.createSimpleRect = function(otherElement){
		   var  svgNS = "http://www.w3.org/2000/svg";
		   var rectElement = document.createElementNS(svgNS,"rect");
		    rectElement.setAttributeNS(null,"fill","white");
		    rectElement.setAttributeNS(null,"visibility", 'hidden' )
		    rectElement.setAttributeNS(null,"x",0)    
		    rectElement.setAttributeNS(null,"y",0) 
		    rectElement.setAttributeNS(null,"width",1) 
		    rectElement.setAttributeNS(null,"height",1)
		    if(otherElement){
		       document.getElementById("firstGroup").insertBefore(rectElement,otherElement);
		    }else{
		       document.getElementById("firstGroup").appendChild(rectElement);
		    }
		    return rectElement
	}
	svghelper.shapeSimpleRect = function (rectElement,x,y,width,height){
		      rectElement.setAttributeNS(null,"x",x)    
		      rectElement.setAttributeNS(null,"y",y) 
		      rectElement.setAttributeNS(null,"width",width) 
		      rectElement.setAttributeNS(null,"height",height)
	}
	svghelper.createBlackRect = function(x,y,width,height){
	   var rect = svghelper.createSimpleRect()
	   rect.setAttributeNS(null,"visibility", 'visible' )
	   rect.setAttributeNS(null,"fill","black")
	   svghelper.shapeSimpleRect(rect,x,y,width,height)
	}
	svghelper.removeElement = function(element){
	  document.getElementById("firstGroup").removeChild(element);
	}
	return svghelper
}


function makeImage(){
 var image = new Mot("IMAGE",1/2,1/2)
 var paysage = new Mot("PAYSAGE",0.5,0.5)
 image.addChild(paysage)
  var ciel = new Mot("CIEL",0.5,0.25)
  paysage.addChild(ciel)
   var nuage1 = new Mot("NUAGE",0.48,0.30)
   ciel.addChild(nuage1)
   var nuage2 = new Mot("NUAGE",0.30,0.1)
   ciel.addChild(nuage2)
   var nuage3 = new Mot("NUAGE",0.15,0.25)
   ciel.addChild(nuage3)
   var avion = new Mot("AVION",0.55,0.11)
   ciel.addChild(avion)
  var horizon = new Mot("HORIZON",0.4,0.5)
  paysage.addChild(horizon)
   var horizon2 = new Mot("HORIZON",0.5,0.49)
   horizon.addChild(horizon2)
   var batiment = new Mot("BÂTIMENT",0.18,0.55)
   horizon.addChild(batiment)
    var facade = new Mot("FAÇADE",0.23,0.55)
    batiment.addChild(facade)
    var tour1 = new Mot("TOUR",0.31,0.43)
    batiment.addChild(tour1)
    var tour2 = new Mot("TOUR",0.10,0.50)
    batiment.addChild(tour2)
    var toit = new Mot("TOIT",0.21,0.45)
    batiment.addChild(toit)
  var terre = new Mot("TERRE",0.5,0.75)
  paysage.addChild(terre)
   var arbre = new Mot("ARBRE",0.82,0.4)
   terre.addChild(arbre)
    var foret = new Mot("FORÊT",0.75,0.37)
    arbre.addChild(foret)
    var alpes = new Mot("ALPES",0.83,0.2)
    arbre.addChild(alpes)
   var pré = new Mot("PRÉ",0.7,0.68)
   terre.addChild(pré)
   var mare = new Mot("MARE",0.35,0.8)
   terre.addChild(mare)
   return image
}

//variable globales
var globals 
var svghelper
var back
function init(){
 globals = new Object()
 
 //conneries de compatibilité
 if(typeof(top) != 'undefined'){
   globals.timer = top
 }else{
   globals.timer = window  
 }


 svghelper = makeSvgHelper()
 globals.letterHeight =  svghelper.calculateHeight("A")
 
 globals.totalWidth = 800
 globals.totalHeight = 500
 if(window.innerWidth){
   globals.totalWidth = window.innerWidth
   globals.totalHeight = window.innerHeight
 }

 back  = svghelper.createBlackRect(0,0,globals.totalWidth,globals.totalHeight)
 

 globals.maxDistance = 500
 globals.image = makeImage()

  //initialisation de la taille
  globals.maxSize =  Math.floor(globals.totalWidth*Mot.getFontSize()/globals.image.width())-10
  if(!globals.maxSize){globals.maxSize=265}
  var startSize = 100
  if(typeof(location)!='undefined'){  startSize = location.href.match(/\d+#?$/)}
  if(!startSize){startSize = globals.maxSize}
  if(!startSize){startSize = 100}
  Mot.setFontSize(startSize)
  
  globals.montreur = new Montreur(globals.image)
  while(globals.montreur.adjustAllToFontSize()){}
  globals.agrandisseur = new Agrandisseur(globals.maxSize)


 //textes à cliquer pour deboguer
 //textes à cliquer pour deboguer
 var linkindex=0
 var links = []
 links[linkindex] = svghelper.createText("...",20,30,60)
 links[linkindex].setAttributeNS(null,"id", "debug")
 links[++linkindex] = svghelper.createText("+10",13,20,30)
 links[linkindex].addEventListener("click", function(){globals.agrandisseur.agrandis(10)},false)
 links[++linkindex] = svghelper.createText("-10",13,50,30)
 links[linkindex].addEventListener("click", function(){globals.agrandisseur.agrandis(-10)},false)
 links[++linkindex] = svghelper.createText("+2",13,80,30)
 links[linkindex].addEventListener("click", function(){globals.agrandisseur.agrandis(2)},false)
 links[++linkindex] = svghelper.createText("-2",13,100,30)
 links[linkindex].addEventListener("click", function(){globals.agrandisseur.agrandis(-2)},false)
 links[++linkindex] = svghelper.createText("senseur",13,150,30)
 links[linkindex].addEventListener("click", readSensor,false)
 links[++linkindex] = svghelper.createText("animer",13,210,30)
// var fanimer0 = globals.agrandisseur.animer
// var fanimer = function(){globals.intervalId=globals.timer.setInterval(fanimer0,50)}
 var fanimer = function(){globals.intervalId=globals.timer.setInterval(function(){globals.agrandisseur.animer()},50)}
 links[linkindex].addEventListener("click", fanimer,false)
 links[++linkindex] = svghelper.createText("animer(senseur)",13,310,30)
 var fanimer = function(){globals.intervalId=globals.timer.setInterval(readSensor,50)}
 links[linkindex].addEventListener("click", fanimer,false)
 links[++linkindex] = svghelper.createText("stop",13,400,30)
 links[linkindex].addEventListener("click", function(){globals.timer.clearInterval(globals.intervalId )},false)
 for(i in links){
   links[i].setAttributeNS(null,"fill","white");
   links[i].setAttributeNS(null,"visibility","visible");
 }

  svghelper.debug(startSize)

}

    ]]></script>
<!--
<script xlink:href="paysage.js" />
     <script xlink:href="logique_svg.js" />
-->
</svg>
